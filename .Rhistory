}
makeDesityPlot(amber_books$text)
plotEmotion <- function(rawText){
rawText %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) -> textSummary
par(mar = c(11,4,4,4))
barplot(textSummary$ave_emotion, names.arg = textSummary$emotion_type, las=2, col="navy")
return(textSummary)
}
plotEmotion(amber_books$text)
tf_dist_amber <- ggplot(book_words, aes(n/total, fill = book)) +
geom_histogram(show.legend = FALSE) +
xlim(NA, 0.0009) +
facet_wrap(~book, ncol = 2, scales = "free_y")
tf_dist_amber
freq_by_rank <- book_words %>%
group_by(book) %>%
mutate(rank = row_number(), term_freq = n/total)
head(freq_by_rank)
tail(freq_by_rank)
rank_subset <- freq_by_rank %>%
filter(rank < 500, rank > 10)
lm(log10(term_freq) ~ log10(rank), data = rank_subset)
freq_by_rank %>%
ggplot(aes(rank, term_freq, color = book)) +
geom_abline(intercept = -0.77, slope = -1.04, color = "navy", linetype = 2) +
geom_line(size = 1.1, alpha = 0.8, show.legend = FALSE) +
scale_x_log10() +
scale_y_log10()
book_words <- book_words %>%
bind_tf_idf(word, book, n)
book_words
# look at terms with higher tf-idf - typically proper nouns (i.e. names)
book_words %>%
select(-total) %>%
arrange(desc(tf_idf))
book_words %>%
arrange(desc(tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(word, tf_idf), tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
# create bigrams of the chronicles of amber
amber_grams <- chronicles_of_amber() %>%
unnest_tokens(bigram, text, token = "ngrams", n=2)
# view the most used bigrams
# amber_grams %>%
#   count(bigram, sort = TRUE)
# split the bigrams into two separate columns word1 and word2
bigrams_separated <- amber_grams %>%
separate(bigram, c("word1", "word2"), sep = " ")
# remove stopwords from bigrams
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2))
# new bigram counts without stopwords
bigram_counts <- bigrams_filtered %>%
count(word1, word2, sort = TRUE)
bigram_counts
bigram_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_united
bigram_tf_idf <- bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf)) %>%
mutate(bigrams = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(bigram, tf_idf), tf_idf, fill = book)) +
geom_col(stat = "idendity", show.legend = FALSE) +
labs(x = NULL, y = "tf-idf of bigram to novel") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
AFINN <- get_sentiments("afinn")
not_word <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE) %>%
ungroup()
not_word
not_word %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n*value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by \"not\"") +
ylab("Afinn sentiment score * number of occurences") +
coord_flip()
bigram_network_graph <- bigram_counts %>%
filter(n > 10) %>%
graph_from_data_frame()
bigram_network_graph
set.seed(486)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, "inches")) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
word = c("tir", "na", "nog'th")
lexicon = c( "custom",  "custom", "custom")
data <- data.frame(word, lexicon)
custom_stop_words <- rbind(data, stop_words)
# separate the books and see which words tend to fall into the same sections - every 10 lines
amber_section_words <- chronicles_of_amber() %>%
mutate(section = row_number() %/% 10) %>% # separate the books into sections of 10 rows
filter(section > 0) %>%
unnest_tokens(word, text) %>%
filter(!word %in% custom_stop_words$word)
# count the words co-occurring within each section - create word pairs using pairwise_count function
word_pairs <- amber_section_words %>%
pairwise_count(word, section, sort = TRUE)
word_pairs %>%
filter(item1 == "time")
word_pairs %>%
filter(item1 == "amber")
word_cor <- amber_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE)
word_cor
word_cor %>%
filter(item1 %in% c("pattern", "amber", "logrus", "shadow")) %>%
group_by(item1) %>%
top_n(5) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~item1, scales = "free") +
coord_flip()
set.seed(486)
word_cor %>%
filter(correlation > 0.21) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "violet", size = 2) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
nine_princes_in_amber <- amber_tidy %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber")
nine_princes_in_amber
afinn <- nine_princes_in_amber %>%
inner_join(get_sentiments("afinn"), by = join_by(word)) %>%
group_by(index = linenumber %/% 40) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
nine_princes_in_amber %>%
inner_join(get_sentiments("bing"), by = join_by(word)) %>%
mutate(method = "BING"),
nine_princes_in_amber %>%
inner_join(get_sentiments("nrc"), by = join_by(word)) %>%
filter(sentiment %in% c("positive", "negative")) %>%
mutate(method = "NRC")
)
bing_and_nrc <- bing_and_nrc %>%
count(method, index = linenumber %/% 40, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn, bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method )) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
bing_word_counts <- nine_princes_in_amber %>%
inner_join(get_sentiments("bing"), by = join_by(word)) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
the_guns_of_avalon <- amber_tidy %>%
group_by(book) %>%
filter(book == "The Guns of Avalon")
# the_guns_of_avalon
sign_of_the_unicorn <- amber_tidy %>%
group_by(book) %>%
filter(book == "Sign of the Unicorn")
# sign_of_the_unicorn
the_hand_of_oberon <- amber_tidy %>%
group_by(book) %>%
filter(book == "The Hand of Oberon")
# the_hand_of_oberon
the_courts_of_chaos <- amber_tidy %>%
group_by(book) %>%
filter(book == "The Courts of Chaos")
# the_courts_of_chaos
the_trumps_of_doom <- amber_tidy %>%
group_by(book) %>%
filter(book == "The Trumps of Doom")
# the_trumps_of_doom
blood_of_amber <- amber_tidy %>%
group_by(book) %>%
filter(book == "Blood of Amber")
# blood_of_amber
sign_of_chaos <- amber_tidy %>%
group_by(book) %>%
filter(book == "Sign of Chaos")
# sign_of_chaos
knight_of_shadows <- amber_tidy %>%
group_by(book) %>%
filter(book == "Knight of Shadows")
# knight_of_shadows
prince_of_chaos <- amber_tidy %>%
group_by(book) %>%
filter(book == "Prince of Chaos")
# prince_of_chaos
# break out the first book in the series
nine_princes_in_amber <- chronicles_of_amber() %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber") %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]"))))
# nine_princes_in_amber
ggplot(sentiment2, aes(sentiment, word_counts)) +
geom_histogram()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, word_counts)) +
geom_histogram()
qplot(sentiment2$sentiment, geom = "histogram", binwidth = 0.1, main = "Sentiment Histogram", filter(sentiment != 0))
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, word_counts)) +
geom_hist()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, word_counts)) +
geom_histogram()
qplot(sentiment2$sentiment, geom = "histogram", binwidth = 0.1, main = "Sentiment Histogram")
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, count(word_counts))) +
geom_histogram()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
sentiment2 %>%
# filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
senti %>%
ggplot(aes(densitySentiment)) +
geom_density(col = "navy")
makeDesityPlot <- function(txt) {
txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0) -> senti
densitySentiment <- density(senti$sentiment)
senti %>%
ggplot(aes(densitySentiment)) +
geom_density(col = "navy")
# plot(densitySentiment, main = "Density of Sentiments")
# polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
densitySentiment
senti
makeDesityPlot <- function(txt) {
txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0) -> senti
densitySentiment <- density(senti$sentiment)
#
# densitySentiment %>%
#   ggplot(aes(densitySentiment)) +
#   geom_density(col = "navy")
plot(densitySentiment, main = "Density of Sentiments")
polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
ggplot(amber_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
geom_smooth(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
ggplot(amber_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
geom_smooth(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x") +
coord_flip()
makeDesityPlot <- function(txt) {
senti <- txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0)
densitySentiment <- density(senti$sentiment)
#
# densitySentiment %>%
#   ggplot(aes(densitySentiment)) +
#   geom_density(col = "navy")
plot(densitySentiment, main = "Density of Sentiments")
polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
makeDesityPlot <- function(txt) {
senti <- txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0)
densitySentiment <- density(senti$sentiment)
densitySentiment %>%
ggplot(aes(densitySentiment)) +
geom_density(col = "navy")
# plot(densitySentiment, main = "Density of Sentiments")
# polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
makeDesityPlot <- function(txt) {
senti <- txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0)
densitySentiment <- density(senti$sentiment)
densitySentiment %>%
ggplot(aes(densitySentiment)) +
geom_density(col = "navy")
# plot(densitySentiment, main = "Density of Sentiments")
# polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
sentiment2 %>%
# filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
qplot(sentiment2$sentiment, geom = "histogram", binwidth = 0.1, main = "Sentiment Histogram")
sentiment2 %>%
# filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
sentiment2 %>%
ilter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_histogram()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density()
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy")
makeDesityPlot <- function(txt) {
senti <- txt %>%
get_sentences() %>%
sentiment()  %>%
filter(sentiment != 0)
densitySentiment <- density(senti$sentiment)
plot(densitySentiment, main = "Density of Sentiments")
polygon(densitySentiment, col = "navy")
return(densitySentiment)
}
makeDesityPlot(amber_books$text)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.25)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, book)) +
geom_density(fill = "navy", alpha = 0.25)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.25)
head(sentiment2, 20)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.25, group = book)
sentiment2 <- sentiment(nine_princes_in_amber$text)
summary(sentiment2$ave_sentiment)
head(sentiment2, 20)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.25)
amber_sentiments <- get_sentences(amber_books$text)
head(amber_sentiments)
amber_sentences <- get_sentences(amber_books$text)
amber_sentences <- get_sentences(amber_books$text)
head(amber_sentences)
sentiment2 <- sentiment(amber_sentences$text)
sentiment2 <- sentiment(amber_books$text)
summary(sentiment2$ave_sentiment)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.25)
sentiment2 %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment)) +
geom_density(fill = "navy", alpha = 0.5)
View(nine_princes_in_amber)
View(the_guns_of_avalon)
the_guns_of_avalon <- amber_tidy %>%
group_by(book) %>%
filter(book == "The Guns of Avalon")
# the_guns_of_avalon
the_guns_of_avalon
the_guns_of_avalon
nine_princes_in_amber
nine_princes_in_amber <- amber_tidy %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber")
nine_princes_in_amber
# break out each book in the series
nine_princes_in_amber <- amber_books %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber") %>%
nine_princes_in_amber
amber_books <- chronicles_of_amber() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]")))) %>%
ungroup()
amber_books
# break out each book in the series
nine_princes_in_amber <- amber_books %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber") %>%
nine_princes_in_amber
# break out each book in the series
nine_princes <- amber_books %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber") %>%
nine_princes
nine_princes <- amber_books %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber")
nine_princes
nine_princes <- amber_books %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber")
guns_avalon <- amber_books %>%
group_by(book) %>%
filter(book == "The Guns of Avalon")
# the_guns_of_avalon
sign_unicorn <- amber_books %>%
group_by(book) %>%
filter(book == "Sign of the Unicorn")
# sign_of_the_unicorn
hand_oberon <- amber_books %>%
group_by(book) %>%
filter(book == "The Hand of Oberon")
# the_hand_of_oberon
courts_chaos <- amber_books %>%
group_by(book) %>%
filter(book == "The Courts of Chaos")
# the_courts_of_chaos
trumps_doom <- amber_books %>%
group_by(book) %>%
filter(book == "The Trumps of Doom")
# the_trumps_of_doom
blood_amber <- amber_books %>%
group_by(book) %>%
filter(book == "Blood of Amber")
# blood_of_amber
sign_chaos <- amber_books %>%
group_by(book) %>%
filter(book == "Sign of Chaos")
# sign_of_chaos
knight_shadows <- amber_books %>%
group_by(book) %>%
filter(book == "Knight of Shadows")
# knight_of_shadows
prince_chaos <- amber_books %>%
group_by(book) %>%
filter(book == "Prince of Chaos")
# prince_of_chaos
