count(word1, word2, word3, sort = TRUE)
bigram_counts
bigram_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_united
bigram_united <- bigrams_filtered %>%
unite(bigram, word1, word2, word3, sep = " ")
bigram_united
bigram_tf_idf <- bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
bigram_tf_idf
bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf)) %>%
mutate(bigrams = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(bigram, tf_idf), tf_idf, fill = book)) +
geom_col(stat = "idendity", show.legend = FALSE) +
labs(x = NULL, y = "tf-idf of bigram to novel") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf)) %>%
mutate(bigrams = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(bigram, tf_idf), tf_idf, fill = book)) +
geom_col(stat = "idendity", show.legend = FALSE) +
labs(x = NULL, y = "tf-idf of trigram to novel") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf)) %>%
mutate(bigrams = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(bigram, tf_idf), tf_idf, fill = book)) +
geom_col(stat = "idendity", show.legend = FALSE) +
labs(x = NULL, y = "tf-idf of trigram to novel") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
# create bigrams of the chronicles of amber
amber_grams <- amber_books %>%
filter(chapter > 0) %>%
unnest_tokens(bigram, text, token = "ngrams", n=2)
# view the most used bigrams
# amber_grams %>%
#   count(bigram, sort = TRUE)
# split the bigrams into two separate columns word1 and word2
bigrams_separated <- amber_grams %>%
separate(bigram, c("word1", "word2", "word3"), sep = " ")
# remove stopwords from bigrams
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
# filter(!word3 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2))
# filter(!is.na(word3))
# new bigram counts without stopwords
bigram_counts <- bigrams_filtered %>%
filter(chapter > 0) %>%
count(word1, word2, sort = TRUE)
bigram_counts
# create bigrams of the chronicles of amber
amber_grams <- amber_books %>%
filter(chapter > 0) %>%
unnest_tokens(bigram, text, token = "ngrams", n=2)
# view the most used bigrams
# amber_grams %>%
#   count(bigram, sort = TRUE)
# split the bigrams into two separate columns word1 and word2
bigrams_separated <- amber_grams %>%
separate(bigram, c("word1", "word2"), sep = " ")
# remove stopwords from bigrams
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
# filter(!word3 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2))
# filter(!is.na(word3))
# new bigram counts without stopwords
bigram_counts <- bigrams_filtered %>%
filter(chapter > 0) %>%
count(word1, word2, sort = TRUE)
bigram_counts
bigram_united <- bigrams_filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram_united
# create bigrams of the chronicles of amber
amber_grams <- amber_books %>%
filter(chapter > 0) %>%
unnest_tokens(bigram, text, token = "ngrams", n=2)
# view the most used bigrams
# amber_grams %>%
#   count(bigram, sort = TRUE)
# split the bigrams into two separate columns word1 and word2
bigrams_separated <- amber_grams %>%
separate(bigram, c("word1", "word2"), sep = " ")
# remove stopwords from bigrams
bigrams_filtered <- bigrams_separated %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word) %>%
# filter(!word3 %in% stop_words$word) %>%
filter(!is.na(word1)) %>%
filter(!is.na(word2))
# filter(!is.na(word3))
# new bigram counts without stopwords
bigram_counts <- bigrams_filtered %>%
filter(chapter > 0) %>%
count(word1, word2, sort = TRUE)
head(bigram_counts)
bigram_united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf)) %>%
mutate(bigrams = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(book) %>%
top_n(5) %>%
ungroup() %>%
ggplot(aes(x = fct_reorder(bigram, tf), tf, fill = book)) +
geom_col(stat = "idendity", show.legend = FALSE) +
labs(x = NULL, y = "tf-idf of trigram to novel") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
bigrams_separated %>%
filter(word1 == "amber") %>%
count(word1, word2, sort = TRUE)
bigrams_separated %>%
filter(word1 == "pattern") %>%
count(word1, word2, sort = TRUE)
bigrams_separated %>%
filter(word1 == "corwin") %>%
count(word1, word2, sort = TRUE)
bigrams_separated %>%
filter(word1 == "merle") %>%
count(word1, word2, sort = TRUE)
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
AFINN <- get_sentiments("afinn")
not_word <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE) %>%
ungroup()
not_word
bigrams_separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
AFINN <- get_sentiments("afinn")
not_word <- bigrams_separated %>%
filter(word1 == "not") %>%
inner_join(AFINN, by = c(word2 = "word")) %>%
count(word2, value, sort = TRUE) %>%
ungroup()
not_word
not_word %>%
mutate(contribution = n * value) %>%
arrange(desc(abs(contribution))) %>%
head(20) %>%
mutate(word2 = reorder(word2, contribution)) %>%
ggplot(aes(word2, n*value, fill = n * value > 0)) +
geom_col(show.legend = FALSE) +
xlab("Words preceded by \"not\"") +
ylab("Afinn sentiment score * number of occurences") +
coord_flip()
set.seed(486)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, "inches")) +
geom_node_point(color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
bigram_network_graph <- bigram_counts %>%
filter(n > 10) %>%
graph_from_data_frame()
bigram_network_graph
set.seed(486)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, "inches")) +
geom_node_point(color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
set.seed(486)
a <- grid::arrow(type = "closed", length = unit(.07, "inches"))
ggraph(bigram_network_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, "inches")) +
geom_node_point(color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# adding tir na nog'th to stop words
word = c("tir", "na", "nog'th")
lexicon = c( "custom",  "custom", "custom")
data <- data.frame(word, lexicon)
custom_stop_words <- rbind(data, stop_words)
# separate the books and see which words tend to fall into the same sections - every 10 lines
amber_section_words <- chronicles_of_amber() %>%
mutate(section = row_number() %/% 10) %>% # separate the books into sections of 10 rows
filter(section > 0) %>%
unnest_tokens(word, text) %>%
filter(!word %in% custom_stop_words$word)
# count the words co-occurring within each section - create word pairs using pairwise_count function
word_pairs <- amber_section_words %>%
pairwise_count(word, section, sort = TRUE)
word_pairs %>%
filter(item1 == "time")
word_pairs %>%
filter(item1 == "amber")
word_pairs
head(word_pairs %>%
filter(item1 == "time"), 10)
# adding tir na nog'th to stop words
word = c("tir", "na", "nog'th")
lexicon = c( "custom",  "custom", "custom")
data <- data.frame(word, lexicon)
custom_stop_words <- rbind(data, stop_words)
# separate the books and see which words tend to fall into the same sections - every 10 lines
amber_section_words <- chronicles_of_amber() %>%
mutate(section = row_number() %/% 10) %>% # separate the books into sections of 10 rows
filter(section > 0) %>%
unnest_tokens(word, text) %>%
filter(!word %in% custom_stop_words$word)
# count the words co-occurring within each section - create word pairs using pairwise_count function
word_pairs <- amber_section_words %>%
pairwise_count(word, section, sort = TRUE)
head(word_pairs %>%
filter(item1 == "time"), 10)
head(word_pairs %>%
filter(item1 == "amber"), 10)
word_cor <- amber_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE)
word_cor
word_cor %>%
filter(item1 %in% c("pattern", "amber", "logrus", "shadow")) %>%
group_by(item1) %>%
top_n(5) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~item1, scales = "free") +
coord_flip()
word_cor %>%
filter(item1 %in% c("pattern", "amber", "logrus", "shadow", "chaos")) %>%
group_by(item1) %>%
top_n(5) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~item1, scales = "free") +
coord_flip()
nine_princes_in_amber <- amber_tidy %>%
group_by(book) %>%
filter(book == "Nine Princes in Amber")
nine_princes_in_amber
afinn <- nine_princes_in_amber %>%
inner_join(get_sentiments("afinn"), by = join_by(word)) %>%
group_by(index = linenumber %/% 40) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
nine_princes_in_amber %>%
inner_join(get_sentiments("bing"), by = join_by(word)) %>%
mutate(method = "BING"),
nine_princes_in_amber %>%
inner_join(get_sentiments("nrc"), by = join_by(word)) %>%
filter(sentiment %in% c("positive", "negative")) %>%
mutate(method = "NRC")
)
bing_and_nrc <- bing_and_nrc %>%
count(method, index = linenumber %/% 40, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn, bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method )) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
bing_word_counts <- nine_princes_in_amber %>%
inner_join(get_sentiments("bing"), by = join_by(word)) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
bing_word_counts <- nine_princes_in_amber %>%
inner_join(get_sentiments("nrc"), by = join_by(word)) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col() +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
bing_word_counts <- nine_princes_in_amber %>%
inner_join(get_sentiments("nrc"), by = join_by(word)) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts %>%
group_by(sentiment) %>%
top_n(10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
coord_flip()
# sentiment2 <- sentiment(amber_books$text)
# summary(sentiment2$sentiment)
nineprinces_senti <- sentiment(nine_princes$text)
nineprinces_senti$book <- "Nine Princes in Amber"
gunsavalon_senti <- sentiment(guns_avalon$text)
gunsavalon_senti$book <- "The Guns of Avalon"
signunicorn_senti <- sentiment(sign_unicorn$text)
signunicorn_senti$book <- "Sign of the Unicorn"
handoberon_senti <- sentiment(hand_oberon$text)
handoberon_senti$book <- "The Hand of Oberon"
courtschaos_senti <- sentiment(courts_chaos$text)
courtschaos_senti$book <- "The Courts of Chaos"
trumpsdoom_senti <- sentiment(trumps_doom$text)
trumpsdoom_senti$book <- "Trumps of Doom"
bloodamber_senti <- sentiment(blood_amber$text)
bloodamber_senti$book <- "Blood of Amber"
signchaos_senti <- sentiment(sign_chaos$text)
signchaos_senti$book <- "Sign of Chaos"
knightshadows_senti <- sentiment(knight_shadows$text)
knightshadows_senti$book <- "Knight of Shadows"
princechaos_senti <- sentiment(prince_chaos$text)
princechaos_senti$book <- "Prince of Chaos"
books <- rbind(nineprinces_senti, gunsavalon_senti, signunicorn_senti, handoberon_senti, courtschaos_senti, trumpsdoom_senti, bloodamber_senti, signchaos_senti, knightshadows_senti, princechaos_senti)
books$book <- as.factor(books$book)
mycolors_density <- c("red4", "firebrick","orangered3", "gold4", "green4", "turquoise4", "navy", "purple4", "darkviolet", "deeppink4" )
books %>%
mutate(book = fct_relevel(book, "Nine Princes in Amber", "The Guns of Avalon", "Sign of the Unicorn", "The Hand of Oberon", "The Courts of Chaos", "The Trumps of Doom", "Blood of Amber", "Sign of Chaos", "Knight of Shadows", "Prince of Chaos")) %>%
filter(sentiment != 0) %>%
ggplot(aes(sentiment, color = book)) +
scale_color_manual(values = mycolors_density) +
labs(title = "Sentiment Density by Book") +
ggthemes::theme_gdocs() +
geom_density()
plotEmotion <- function(rawText){
textSummary <- rawText %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = FALSE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion))
par(mar = c(11,4,4,4))
barplot(textSummary$ave_emotion, names.arg = textSummary$emotion_type, las=2, col="navy")
return(textSummary)
}
plotEmotion(amber_books$text)
amber_emotions <- amber_books$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
amber_emotions$book <- "Chronicles of Amber"
nineprinces_emotions <- nine_princes$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
nineprinces_emotions$book <- "Nine Princes in Amber"
gunsavalon_emotions <- guns_avalon$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
gunsavalon_emotions$book <- "The Guns of Avalon"
signunicorn_emotions <- sign_unicorn$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
signunicorn_emotions$book <- "Sign of the Unicorn"
handoberon_emotions <- hand_oberon$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
handoberon_emotions$book <- "The Hand of Oberon"
courtschaos_emotions <- courts_chaos$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
courtschaos_emotions$book <- "The Courts of Chaos"
trumpsdoom_emotions <- trumps_doom$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
trumpsdoom_emotions$book <- "The Trumps of Doom"
bloodamber_emotions <- blood_amber$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
bloodamber_emotions$book <- "Blood of Amber"
signchaos_emotions <- sign_chaos$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
signchaos_emotions$book <- "Sign of Chaos"
knightshadows_emotions <- knight_shadows$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
knightshadows_emotions$book <- "Knight of Shadows"
princechaos_emotions <- prince_chaos$text %>%
get_sentences() %>%
emotion_by(drop.unused.emotions = TRUE) %>%
group_by(emotion_type) %>%
summarise(ave_emotion = mean(ave_emotion)) %>%
mutate(emotion_type = reorder(emotion_type, ave_emotion))
princechaos_emotions$book <- "Prince of Chaos"
emotions_bind <- rbind(nineprinces_emotions, gunsavalon_emotions, signunicorn_emotions, handoberon_emotions, courtschaos_emotions, trumpsdoom_emotions, bloodamber_emotions, signchaos_emotions, knightshadows_emotions, princechaos_emotions)
mycolors <- c("firebrick","orangered3", "salmon3", "gold4", "green4", "blue", "navy", "purple4", "darkviolet", "deeppink4", "pink4")
emotions_bind %>%
mutate(book = fct_relevel(book, "Nine Princes in Amber", "The Guns of Avalon", "Sign of the Unicorn", "The Hand of Oberon", "The Courts of Chaos", "The Trumps of Doom", "Blood of Amber", "Sign of Chaos", "Knight of Shadows", "Prince of Chaos")) %>%
ggplot(aes(emotion_type, ave_emotion, fill = book)) +
geom_col(position = "dodge") +
# geom_bar(amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_fill_manual(values = mycolors) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
emotions_bind %>%
mutate(book = fct_relevel(book, "Nine Princes in Amber", "The Guns of Avalon", "Sign of the Unicorn", "The Hand of Oberon", "The Courts of Chaos", "The Trumps of Doom", "Blood of Amber", "Sign of Chaos", "Knight of Shadows", "Prince of Chaos")) %>%
ggplot() +
geom_col(position = "dodge") +
geom_bar(amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_fill_manual(values = mycolors) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
emotions_bind %>%
mutate(book = fct_relevel(book, "Nine Princes in Amber", "The Guns of Avalon", "Sign of the Unicorn", "The Hand of Oberon", "The Courts of Chaos", "The Trumps of Doom", "Blood of Amber", "Sign of Chaos", "Knight of Shadows", "Prince of Chaos")) %>%
ggplot(aes(emotion_type, ave_emotion, fill = book)) +
geom_col(position = "dodge") +
# geom_bar(amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_fill_manual(values = mycolors) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
emotions_bind <- emotions_bind %>%
mutate(book = fct_relevel(book, "Nine Princes in Amber", "The Guns of Avalon", "Sign of the Unicorn", "The Hand of Oberon", "The Courts of Chaos", "The Trumps of Doom", "Blood of Amber", "Sign of Chaos", "Knight of Shadows", "Prince of Chaos"))
emotions_graph <- ggplot() +
geom_col(data = emotions_bind, aes(emotion_type, ave_emotion, fill = book), position = "dodge") +
geom_bar(data = amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_fill_manual(values = mycolors) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
ggplot() +
geom_col(data = emotions_bind, aes(emotion_type, ave_emotion, fill = book), position = "dodge") +
geom_bar(data = amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_fill_manual(values = mycolors) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
ggplot() +
geom_col(data = emotions_bind, aes(emotion_type, ave_emotion, fill = book), position = "dodge") +
scale_fill_manual(values = mycolors) +
geom_bar(data = amber_emotions, aes(emotion_type, ave_emotion, fill = "skyblue")) +
scale_x_discrete(guide = guide_axis(angle = 90)) +
ggthemes::theme_gdocs() +
labs(title = "Emotion Classification of Text by Book", x = "Emotion Type", y = "Average Emotion of Text")
